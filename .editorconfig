# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = false

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = false
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:error
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_property = false:error

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:silent
dotnet_style_predefined_type_for_member_access = true:silent

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent

# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:error
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion

# Field preferences
dotnet_style_readonly_field = true:none

# Parameter preferences
dotnet_code_quality_unused_parameters = all:suggestion

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = false:error
csharp_style_var_for_built_in_types = false:error
csharp_style_var_when_type_is_apparent = true:error

# Expression-bodied members
csharp_style_expression_bodied_accessors = when_on_single_line:error
csharp_style_expression_bodied_constructors = false:error
csharp_style_expression_bodied_indexers = when_on_single_line:error
csharp_style_expression_bodied_lambdas = when_on_single_line:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_expression_bodied_methods = false:error
csharp_style_expression_bodied_operators = false:error
csharp_style_expression_bodied_properties = when_on_single_line:error

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_switch_expression = false:silent

# Null-checking preferences
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_prefer_static_local_function = true:suggestion
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent

# Code-block preferences
csharp_prefer_braces = true:error
csharp_prefer_simple_using_statement = false:error

# Expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:silent

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = error
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.type_should_be_pascal_case.severity = error
dotnet_naming_rule.type_should_be_pascal_case.symbols = type
dotnet_naming_rule.type_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.asyncmethod_or_async_localfunction_should_be_pascalcaseasync.severity = error
dotnet_naming_rule.asyncmethod_or_async_localfunction_should_be_pascalcaseasync.symbols = asyncmethod_or_async_localfunction
dotnet_naming_rule.asyncmethod_or_async_localfunction_should_be_pascalcaseasync.style = pascalcaseasync

dotnet_naming_rule.method_or_local_function_should_be_pascal_case.severity = error
dotnet_naming_rule.method_or_local_function_should_be_pascal_case.symbols = method_or_local_function
dotnet_naming_rule.method_or_local_function_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.property_should_be_pascal_case.severity = error
dotnet_naming_rule.property_should_be_pascal_case.symbols = property
dotnet_naming_rule.property_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.event_should_be_onpascalcase.severity = error
dotnet_naming_rule.event_should_be_onpascalcase.symbols = event
dotnet_naming_rule.event_should_be_onpascalcase.style = onpascalcase

dotnet_naming_rule.constant_should_be_capital_snake_case.severity = error
dotnet_naming_rule.constant_should_be_capital_snake_case.symbols = constant
dotnet_naming_rule.constant_should_be_capital_snake_case.style = capital_snake_case

dotnet_naming_rule.static_field_should_be_s_camelcase.severity = error
dotnet_naming_rule.static_field_should_be_s_camelcase.symbols = static_field
dotnet_naming_rule.static_field_should_be_s_camelcase.style = s_camelcase

dotnet_naming_rule.public_field_should_be_pascal_case.severity = error
dotnet_naming_rule.public_field_should_be_pascal_case.symbols = public_field
dotnet_naming_rule.public_field_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.field_should_be_m_camelcase.severity = error
dotnet_naming_rule.field_should_be_m_camelcase.symbols = field
dotnet_naming_rule.field_should_be_m_camelcase.style = m_camelcase

dotnet_naming_rule.local_var_or_parameter_should_be_camelcase.severity = error
dotnet_naming_rule.local_var_or_parameter_should_be_camelcase.symbols = local_var_or_parameter
dotnet_naming_rule.local_var_or_parameter_should_be_camelcase.style = camelcase

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.method_or_local_function.applicable_kinds = method, local_function
dotnet_naming_symbols.method_or_local_function.applicable_accessibilities = *
dotnet_naming_symbols.method_or_local_function.required_modifiers = 

dotnet_naming_symbols.static_field.applicable_kinds = field
dotnet_naming_symbols.static_field.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.static_field.required_modifiers = static

dotnet_naming_symbols.type.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.type.applicable_accessibilities = *
dotnet_naming_symbols.type.required_modifiers = 

dotnet_naming_symbols.field.applicable_kinds = field
dotnet_naming_symbols.field.applicable_accessibilities = *
dotnet_naming_symbols.field.required_modifiers = 

dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.property.applicable_accessibilities = *
dotnet_naming_symbols.property.required_modifiers = 

dotnet_naming_symbols.event.applicable_kinds = event
dotnet_naming_symbols.event.applicable_accessibilities = *
dotnet_naming_symbols.event.required_modifiers = 

dotnet_naming_symbols.asyncmethod_or_async_localfunction.applicable_kinds = method, local_function
dotnet_naming_symbols.asyncmethod_or_async_localfunction.applicable_accessibilities = *
dotnet_naming_symbols.asyncmethod_or_async_localfunction.required_modifiers = async

dotnet_naming_symbols.constant.applicable_kinds = field
dotnet_naming_symbols.constant.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.constant.required_modifiers = const

dotnet_naming_symbols.local_var_or_parameter.applicable_kinds = parameter, local
dotnet_naming_symbols.local_var_or_parameter.applicable_accessibilities = local
dotnet_naming_symbols.local_var_or_parameter.required_modifiers = 

dotnet_naming_symbols.public_field.applicable_kinds = field
dotnet_naming_symbols.public_field.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_field.required_modifiers = 

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.capital_snake_case.required_prefix = 
dotnet_naming_style.capital_snake_case.required_suffix = 
dotnet_naming_style.capital_snake_case.word_separator = _
dotnet_naming_style.capital_snake_case.capitalization = all_upper

dotnet_naming_style.camelcase.required_prefix = 
dotnet_naming_style.camelcase.required_suffix = 
dotnet_naming_style.camelcase.word_separator = 
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.s_camelcase.required_prefix = s_
dotnet_naming_style.s_camelcase.required_suffix = 
dotnet_naming_style.s_camelcase.word_separator = 
dotnet_naming_style.s_camelcase.capitalization = camel_case

dotnet_naming_style.m_camelcase.required_prefix = m_
dotnet_naming_style.m_camelcase.required_suffix = 
dotnet_naming_style.m_camelcase.word_separator = 
dotnet_naming_style.m_camelcase.capitalization = camel_case

dotnet_naming_style.onpascalcase.required_prefix = On
dotnet_naming_style.onpascalcase.required_suffix = 
dotnet_naming_style.onpascalcase.word_separator = 
dotnet_naming_style.onpascalcase.capitalization = pascal_case

dotnet_naming_style.pascalcaseasync.required_prefix = 
dotnet_naming_style.pascalcaseasync.required_suffix = Async
dotnet_naming_style.pascalcaseasync.word_separator = 
dotnet_naming_style.pascalcaseasync.capitalization = pascal_case
